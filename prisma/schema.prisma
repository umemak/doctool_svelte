// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(cuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  email                  String                  @unique
  password               String
  articles               Article[]
  comments               Comment[]
  likes                  Like[]
  reviews                Review[]
  adventCalendars        AdventCalendar[]
  adventCalendarArticles AdventCalendarArticle[]
}

model Article {
  id                     String                  @id @default(cuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  deletedAt              DateTime?
  title                  String
  description            String
  author                 User                    @relation(fields: [authorId], references: [id])
  authorId               String
  path                   String
  filename               String                  @default("")
  allow_external         Boolean                 @default(false)
  show_from              DateTime?
  show_until             DateTime?
  review_ok              Boolean                 @default(false)
  tags                   Tag[]
  tagId                  String?
  comments               Comment[]
  likes                  Like[]
  reviews                Review[]
  adventCalendarArticles AdventCalendarArticle[]
}

model Tag {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  articles  Article[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
}

model Review {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  body       String
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  String
  reviewer   User     @relation(fields: [reviewerId], references: [id])
  reviewerId String
  approved   Boolean  @default(false)
}

model AdventCalendar {
  id        String                  @id @default(cuid())
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt
  year      Int
  category  String
  author    User                    @relation(fields: [authorId], references: [id])
  authorId  String
  articles  AdventCalendarArticle[]
}

model AdventCalendarArticle {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  adventCalendar   AdventCalendar @relation(fields: [adventCalendarId], references: [id])
  adventCalendarId String
  day              Int
  title            String
  author           User           @relation(fields: [authorId], references: [id])
  authorId         String
  article          Article        @relation(fields: [articleId], references: [id])
  articleId        String
}
