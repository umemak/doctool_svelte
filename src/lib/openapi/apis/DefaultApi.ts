/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArticleCreate,
  ArticleResponse,
  HTTPValidationError,
  LoginRequest,
  LoginResponse,
  ReviewCreate,
  ReviewResponse,
  UserResponse,
} from '../models/index';
import {
    ArticleCreateFromJSON,
    ArticleCreateToJSON,
    ArticleResponseFromJSON,
    ArticleResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    LoginRequestFromJSON,
    LoginRequestToJSON,
    LoginResponseFromJSON,
    LoginResponseToJSON,
    ReviewCreateFromJSON,
    ReviewCreateToJSON,
    ReviewResponseFromJSON,
    ReviewResponseToJSON,
    UserResponseFromJSON,
    UserResponseToJSON,
} from '../models/index';

export interface CreateArticleArticlesPostRequest {
    articleCreate: ArticleCreate;
}

export interface CreateReviewReviewsPostRequest {
    reviewCreate: ReviewCreate;
}

export interface GetReviewReviewsIdGetRequest {
    id: string;
}

export interface GetUserUsersIdGetRequest {
    id: string;
}

export interface LoginLoginPostRequest {
    loginRequest: LoginRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Article
     */
    async createArticleArticlesPostRaw(requestParameters: CreateArticleArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponse>> {
        if (requestParameters.articleCreate === null || requestParameters.articleCreate === undefined) {
            throw new runtime.RequiredError('articleCreate','Required parameter requestParameters.articleCreate was null or undefined when calling createArticleArticlesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleCreateToJSON(requestParameters.articleCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseFromJSON(jsonValue));
    }

    /**
     * Create Article
     */
    async createArticleArticlesPost(requestParameters: CreateArticleArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponse> {
        const response = await this.createArticleArticlesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Review
     */
    async createReviewReviewsPostRaw(requestParameters: CreateReviewReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.reviewCreate === null || requestParameters.reviewCreate === undefined) {
            throw new runtime.RequiredError('reviewCreate','Required parameter requestParameters.reviewCreate was null or undefined when calling createReviewReviewsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewCreateToJSON(requestParameters.reviewCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Create Review
     */
    async createReviewReviewsPost(requestParameters: CreateReviewReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewResponse> {
        const response = await this.createReviewReviewsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Articles
     */
    async getArticlesArticlesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ArticleResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleResponseFromJSON));
    }

    /**
     * Get Articles
     */
    async getArticlesArticlesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ArticleResponse>> {
        const response = await this.getArticlesArticlesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Review
     */
    async getReviewReviewsIdGetRaw(requestParameters: GetReviewReviewsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReviewReviewsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Get Review
     */
    async getReviewReviewsIdGet(requestParameters: GetReviewReviewsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewResponse> {
        const response = await this.getReviewReviewsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reviews
     */
    async getReviewsReviewsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReviewResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewResponseFromJSON));
    }

    /**
     * Get Reviews
     */
    async getReviewsReviewsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReviewResponse>> {
        const response = await this.getReviewsReviewsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get User
     */
    async getUserUsersIdGetRaw(requestParameters: GetUserUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserUsersIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserResponseFromJSON(jsonValue));
    }

    /**
     * Get User
     */
    async getUserUsersIdGet(requestParameters: GetUserUsersIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserResponse> {
        const response = await this.getUserUsersIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Users
     */
    async getUsersUsersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserResponseFromJSON));
    }

    /**
     * Get Users
     */
    async getUsersUsersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserResponse>> {
        const response = await this.getUsersUsersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginLoginPostRaw(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginResponse>> {
        if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
            throw new runtime.RequiredError('loginRequest','Required parameter requestParameters.loginRequest was null or undefined when calling loginLoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginRequestToJSON(requestParameters.loginRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
    }

    /**
     * Login
     */
    async loginLoginPost(requestParameters: LoginLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginResponse> {
        const response = await this.loginLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
