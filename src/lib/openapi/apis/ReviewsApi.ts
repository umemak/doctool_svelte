/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  ReviewCreate,
  ReviewResponse,
  ReviewUpdate,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ReviewCreateFromJSON,
    ReviewCreateToJSON,
    ReviewResponseFromJSON,
    ReviewResponseToJSON,
    ReviewUpdateFromJSON,
    ReviewUpdateToJSON,
} from '../models/index';

export interface CreateReviewReviewsPostRequest {
    reviewCreate: ReviewCreate;
}

export interface GetReviewReviewsIdGetRequest {
    id: string;
}

export interface UpdateReviewReviewsPutRequest {
    reviewUpdate: ReviewUpdate;
}

/**
 * 
 */
export class ReviewsApi extends runtime.BaseAPI {

    /**
     * Create Review
     */
    async createReviewReviewsPostRaw(requestParameters: CreateReviewReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.reviewCreate === null || requestParameters.reviewCreate === undefined) {
            throw new runtime.RequiredError('reviewCreate','Required parameter requestParameters.reviewCreate was null or undefined when calling createReviewReviewsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewCreateToJSON(requestParameters.reviewCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Create Review
     */
    async createReviewReviewsPost(requestParameters: CreateReviewReviewsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewResponse> {
        const response = await this.createReviewReviewsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Review
     */
    async getReviewReviewsIdGetRaw(requestParameters: GetReviewReviewsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getReviewReviewsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Get Review
     */
    async getReviewReviewsIdGet(requestParameters: GetReviewReviewsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewResponse> {
        const response = await this.getReviewReviewsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Reviews
     */
    async getReviewsReviewsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ReviewResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/reviews`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ReviewResponseFromJSON));
    }

    /**
     * Get Reviews
     */
    async getReviewsReviewsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ReviewResponse>> {
        const response = await this.getReviewsReviewsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Review
     */
    async updateReviewReviewsPutRaw(requestParameters: UpdateReviewReviewsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReviewResponse>> {
        if (requestParameters.reviewUpdate === null || requestParameters.reviewUpdate === undefined) {
            throw new runtime.RequiredError('reviewUpdate','Required parameter requestParameters.reviewUpdate was null or undefined when calling updateReviewReviewsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/reviews`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReviewUpdateToJSON(requestParameters.reviewUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReviewResponseFromJSON(jsonValue));
    }

    /**
     * Update Review
     */
    async updateReviewReviewsPut(requestParameters: UpdateReviewReviewsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReviewResponse> {
        const response = await this.updateReviewReviewsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
