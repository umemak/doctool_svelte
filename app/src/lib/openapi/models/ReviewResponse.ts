/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReviewResponse
 */
export interface ReviewResponse {
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    comment: string;
    /**
     * 
     * @type {Date}
     * @memberof ReviewResponse
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReviewResponse
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ReviewResponse
     */
    deletedAt: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    reviewerId: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewResponse
     */
    articleId: string;
    /**
     * 
     * @type {boolean}
     * @memberof ReviewResponse
     */
    approved: boolean;
}

/**
 * Check if a given object implements the ReviewResponse interface.
 */
export function instanceOfReviewResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "comment" in value;
    isInstance = isInstance && "createdAt" in value;
    isInstance = isInstance && "updatedAt" in value;
    isInstance = isInstance && "deletedAt" in value;
    isInstance = isInstance && "reviewerId" in value;
    isInstance = isInstance && "articleId" in value;
    isInstance = isInstance && "approved" in value;

    return isInstance;
}

export function ReviewResponseFromJSON(json: any): ReviewResponse {
    return ReviewResponseFromJSONTyped(json, false);
}

export function ReviewResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReviewResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'comment': json['comment'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'deletedAt': (json['deleted_at'] === null ? null : new Date(json['deleted_at'])),
        'reviewerId': json['reviewer_id'],
        'articleId': json['article_id'],
        'approved': json['approved'],
    };
}

export function ReviewResponseToJSON(value?: ReviewResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'comment': value.comment,
        'created_at': (value.createdAt.toISOString()),
        'updated_at': (value.updatedAt.toISOString()),
        'deleted_at': (value.deletedAt === null ? null : value.deletedAt.toISOString()),
        'reviewer_id': value.reviewerId,
        'article_id': value.articleId,
        'approved': value.approved,
    };
}

