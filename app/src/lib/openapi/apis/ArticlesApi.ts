/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ArticleCreate,
  ArticleResponse,
  ArticleUpdate,
  HTTPValidationError,
} from '../models/index';
import {
    ArticleCreateFromJSON,
    ArticleCreateToJSON,
    ArticleResponseFromJSON,
    ArticleResponseToJSON,
    ArticleUpdateFromJSON,
    ArticleUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateArticleArticlesPostRequest {
    articleCreate: ArticleCreate;
}

export interface DeleteArticleArticlesIdDeleteRequest {
    id: string;
}

export interface GetArticleArticlesIdGetRequest {
    id: string;
}

export interface UpdateArticleArticlesIdPutRequest {
    id: string;
    articleUpdate: ArticleUpdate;
}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI {

    /**
     * Create Article
     */
    async createArticleArticlesPostRaw(requestParameters: CreateArticleArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponse>> {
        if (requestParameters.articleCreate === null || requestParameters.articleCreate === undefined) {
            throw new runtime.RequiredError('articleCreate','Required parameter requestParameters.articleCreate was null or undefined when calling createArticleArticlesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleCreateToJSON(requestParameters.articleCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseFromJSON(jsonValue));
    }

    /**
     * Create Article
     */
    async createArticleArticlesPost(requestParameters: CreateArticleArticlesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponse> {
        const response = await this.createArticleArticlesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Article
     */
    async deleteArticleArticlesIdDeleteRaw(requestParameters: DeleteArticleArticlesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteArticleArticlesIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseFromJSON(jsonValue));
    }

    /**
     * Delete Article
     */
    async deleteArticleArticlesIdDelete(requestParameters: DeleteArticleArticlesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponse> {
        const response = await this.deleteArticleArticlesIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Article
     */
    async getArticleArticlesIdGetRaw(requestParameters: GetArticleArticlesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getArticleArticlesIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseFromJSON(jsonValue));
    }

    /**
     * Get Article
     */
    async getArticleArticlesIdGet(requestParameters: GetArticleArticlesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponse> {
        const response = await this.getArticleArticlesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Articles
     */
    async getArticlesArticlesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ArticleResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ArticleResponseFromJSON));
    }

    /**
     * Get Articles
     */
    async getArticlesArticlesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ArticleResponse>> {
        const response = await this.getArticlesArticlesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update Article
     */
    async updateArticleArticlesIdPutRaw(requestParameters: UpdateArticleArticlesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ArticleResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateArticleArticlesIdPut.');
        }

        if (requestParameters.articleUpdate === null || requestParameters.articleUpdate === undefined) {
            throw new runtime.RequiredError('articleUpdate','Required parameter requestParameters.articleUpdate was null or undefined when calling updateArticleArticlesIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ArticleUpdateToJSON(requestParameters.articleUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleResponseFromJSON(jsonValue));
    }

    /**
     * Update Article
     */
    async updateArticleArticlesIdPut(requestParameters: UpdateArticleArticlesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ArticleResponse> {
        const response = await this.updateArticleArticlesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
