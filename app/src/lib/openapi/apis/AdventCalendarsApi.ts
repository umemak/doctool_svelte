/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdventCalendarCreate,
  AdventCalendarResponse,
  HTTPValidationError,
} from '../models/index';
import {
    AdventCalendarCreateFromJSON,
    AdventCalendarCreateToJSON,
    AdventCalendarResponseFromJSON,
    AdventCalendarResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateAdventCalendarAdventCalendarsPostRequest {
    adventCalendarCreate: AdventCalendarCreate;
}

export interface GetAdventCalendarAdventCalendarsIdGetRequest {
    id: string;
}

export interface GetAdventCalendarsByYearAdventCalendarsYearYearGetRequest {
    year: number;
}

export interface GetAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGetRequest {
    year: number;
    title: string;
}

/**
 * 
 */
export class AdventCalendarsApi extends runtime.BaseAPI {

    /**
     * Create Advent Calendar
     */
    async createAdventCalendarAdventCalendarsPostRaw(requestParameters: CreateAdventCalendarAdventCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdventCalendarResponse>> {
        if (requestParameters.adventCalendarCreate === null || requestParameters.adventCalendarCreate === undefined) {
            throw new runtime.RequiredError('adventCalendarCreate','Required parameter requestParameters.adventCalendarCreate was null or undefined when calling createAdventCalendarAdventCalendarsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/advent_calendars`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdventCalendarCreateToJSON(requestParameters.adventCalendarCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdventCalendarResponseFromJSON(jsonValue));
    }

    /**
     * Create Advent Calendar
     */
    async createAdventCalendarAdventCalendarsPost(requestParameters: CreateAdventCalendarAdventCalendarsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdventCalendarResponse> {
        const response = await this.createAdventCalendarAdventCalendarsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Advent Calendar
     */
    async getAdventCalendarAdventCalendarsIdGetRaw(requestParameters: GetAdventCalendarAdventCalendarsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdventCalendarResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAdventCalendarAdventCalendarsIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/advent_calendars/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdventCalendarResponseFromJSON(jsonValue));
    }

    /**
     * Get Advent Calendar
     */
    async getAdventCalendarAdventCalendarsIdGet(requestParameters: GetAdventCalendarAdventCalendarsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdventCalendarResponse> {
        const response = await this.getAdventCalendarAdventCalendarsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Advent Calendars
     */
    async getAdventCalendarsAdventCalendarsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdventCalendarResponse>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/advent_calendars`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdventCalendarResponseFromJSON));
    }

    /**
     * Get Advent Calendars
     */
    async getAdventCalendarsAdventCalendarsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdventCalendarResponse>> {
        const response = await this.getAdventCalendarsAdventCalendarsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Advent Calendars By Year
     */
    async getAdventCalendarsByYearAdventCalendarsYearYearGetRaw(requestParameters: GetAdventCalendarsByYearAdventCalendarsYearYearGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdventCalendarResponse>>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling getAdventCalendarsByYearAdventCalendarsYearYearGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/advent_calendars/year/{year}}`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdventCalendarResponseFromJSON));
    }

    /**
     * Get Advent Calendars By Year
     */
    async getAdventCalendarsByYearAdventCalendarsYearYearGet(requestParameters: GetAdventCalendarsByYearAdventCalendarsYearYearGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdventCalendarResponse>> {
        const response = await this.getAdventCalendarsByYearAdventCalendarsYearYearGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Advent Calendars By Year And Title
     */
    async getAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGetRaw(requestParameters: GetAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<AdventCalendarResponse>>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling getAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGet.');
        }

        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling getAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/advent_calendars/year/{year}/{title}}`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters.year))).replace(`{${"title"}}`, encodeURIComponent(String(requestParameters.title))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AdventCalendarResponseFromJSON));
    }

    /**
     * Get Advent Calendars By Year And Title
     */
    async getAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGet(requestParameters: GetAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<AdventCalendarResponse>> {
        const response = await this.getAdventCalendarsByYearAndTitleAdventCalendarsYearYearTitleGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
